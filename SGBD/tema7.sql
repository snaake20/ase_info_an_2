-- 1. CONSTRUITI UN PACHET CARE SA CONTINA:

-- - O FUNCTIE CARE RETURNEAZA NUMARUL DE COMENZI ÎNCHEIATE DE CATRE CLIENTUL AL CARUI ID ESTE DAT CA PARAMETRU. TRATATI CAZUL ÎN CARE NU EXISTA CLIENTUL SPECIFICAT;

-- - O PROCEDURA CARE FOLOSESTE FUNCTIA DE MAI SUS PENTRU A AFISA PRIMII 3 CLIENTI CU CELE MAI MULTE COMENZI ÎNCHEIATE.

-- SA SE APELEZE PROCEDURA DIN CADRUL PACHETULUI.

CREATE OR REPLACE PACKAGE PACHET1 AS
  FUNCTION NR_COMENZI(
    P_ID IN CLIENTI.ID_CLIENT%TYPE
  ) RETURN NUMBER;
  PROCEDURE TOP_TREI_CLIENTI;
END PACHET1;
/

CREATE OR REPLACE PACKAGE BODY pachet1 AS

  FUNCTION nr_comenzi(p_id IN CLIENTI.ID_CLIENT%TYPE) RETURN NUMBER IS
    nr NUMBER;
    client_doesnt_exist EXCEPTION;
  BEGIN
    -- verificam daca exista clientul
    SELECT COUNT(*)
    INTO nr
    FROM CLIENTI
    WHERE ID_CLIENT = p_id;
    IF nr = 0 THEN
      RAISE client_doesnt_exist;
    END IF;
    -- nr de comenzi
    SELECT COUNT(*)
    INTO nr
    FROM COMENZI
    WHERE ID_CLIENT = p_id;
    RETURN nr;
    EXCEPTION
      WHEN client_doesnt_exist THEN
        DBMS_OUTPUT.PUT_LINE('Clientul nu exista!');
        RETURN -1;
  END nr_comenzi;

  PROCEDURE top_trei_clienti IS
    CURSOR c1 IS
      SELECT ID_CLIENT, NUME_CLIENT, NR_COMENZI(ID_CLIENT) AS NR
      FROM CLIENTI
      GROUP BY ID_CLIENT, NUME_CLIENT
      ORDER BY NR DESC;
    nr NUMBER;
  BEGIN
    nr := 0;
    FOR r IN c1 LOOP
      IF nr < 3 THEN
        DBMS_OUTPUT.PUT_LINE(r.ID_CLIENT || ' ' || r.NUME_CLIENT || ' ' || r.NR);
        nr := nr + 1;
      END IF;
    END LOOP;
  END top_trei_clienti;

END pachet1;
/

-- SA SE APELEZE PROCEDURA DIN CADRUL PACHETULUI.

BEGIN
  pachet1.top_trei_clienti;
END;
/

-- 2. REALIZATI UN PACHET DE SUBPROGRAME CARE SA CONTINA:

-- - O PROCEDURA CARE SA ADAUGE O ÎNREGISTRARE NOUA ÎN TABELA FUNCTII. INFORMATIILE CE TREBUIE ADAUGATE SUNT FURNIZATE DREPT PARAMETRI PROCEDURII. SE TRATEAZA CAZUL ÎN CARE EXISTA DEJA O FUNCTIE CU CODUL INTRODUS.

-- - O PROCEDURA CARE SA MODIFICE DENUMIREA UNEI FUNCTII. CODUL FUNCTIEI PENTRU CARE SE FACE MODIFICAREA SI NOUA DENUMIRE A FUNCTIEI SUNT PARAMETRII PROCEDURII. SE TRATEAZA CAZUL ÎN CARE MODIFICAREA NU ARE LOC DIN CAUZA PRECIZARII UNUI COD CARE NU SE REGASESTE ÎN TABELA.

-- - O PROCEDURA CARE SA STEARGA O FUNCTIE PE BAZA CODULUI PRIMIT DREPT PARAMETRU. SE TRATEAZA CAZUL ÎN CARE CODUL FURNIZAT NU EXISTA.

-- SA SE APELEZE SUBPROGRAMELE DIN CADRUL PACHETULUI.

select * from FUNCTII;

CREATE OR REPLACE PACKAGE PACHET2 AS
  PROCEDURE ADAUGA_FUNCTIE(
    P_ID IN FUNCTII.ID_FUNCTIE%TYPE,
    P_DENUMIRE IN FUNCTII.DENUMIRE_FUNCTIE%TYPE,
    P_SALARIU_MIN IN FUNCTII.SALARIU_MIN%TYPE,
    P_SALARIU_MAX IN FUNCTII.SALARIU_MAX%TYPE
  );
  PROCEDURE MODIFICA_FUNCTIE(
    P_ID IN FUNCTII.ID_FUNCTIE%TYPE,
    P_DENUMIRE IN FUNCTII.DENUMIRE_FUNCTIE%TYPE
  );
  PROCEDURE STERGE_FUNCTIE(
    P_ID IN FUNCTII.ID_FUNCTIE%TYPE
  );
END PACHET2;
/

CREATE OR REPLACE PACKAGE BODY PACHET2 AS

  PROCEDURE ADAUGA_FUNCTIE(
    P_ID IN FUNCTII.ID_FUNCTIE%TYPE,
    P_DENUMIRE IN FUNCTII.DENUMIRE_FUNCTIE%TYPE,
    P_SALARIU_MIN IN FUNCTII.SALARIU_MIN%TYPE,
    P_SALARIU_MAX IN FUNCTII.SALARIU_MAX%TYPE
  ) IS
    nr NUMBER;
    functie_exists EXCEPTION;
  BEGIN
    SELECT COUNT(*) INTO NR FROM FUNCTII WHERE ID_FUNCTIE = P_ID;
    IF nr > 0 THEN
      RAISE functie_exists;
    END IF;
    INSERT INTO FUNCTII VALUES(P_ID, P_DENUMIRE, P_SALARIU_MIN, P_SALARIU_MAX);
  EXCEPTION
    WHEN functie_exists THEN
      DBMS_OUTPUT.PUT_LINE('Functia exista deja!');
  END ADAUGA_FUNCTIE;

  PROCEDURE MODIFICA_FUNCTIE(
    P_ID IN FUNCTII.ID_FUNCTIE%TYPE,
    P_DENUMIRE IN FUNCTII.DENUMIRE_FUNCTIE%TYPE
  ) IS
    nr NUMBER;
    functie_doesnt_exist EXCEPTION;
  BEGIN
    SELECT COUNT(*) INTO NR FROM FUNCTII WHERE ID_FUNCTIE = P_ID;
    IF nr = 0 THEN
      RAISE functie_doesnt_exist;
    END IF;
    UPDATE FUNCTII SET DENUMIRE_FUNCTIE = P_DENUMIRE WHERE ID_FUNCTIE = P_ID;
  EXCEPTION
    WHEN functie_doesnt_exist THEN
      DBMS_OUTPUT.PUT_LINE('Functia nu exista!');
  END MODIFICA_FUNCTIE;

  PROCEDURE STERGE_FUNCTIE(
    P_ID IN FUNCTII.ID_FUNCTIE%TYPE
  ) IS
    nr NUMBER;
    functie_doesnt_exist EXCEPTION;
  BEGIN
    SELECT COUNT(*) INTO NR FROM FUNCTII WHERE ID_FUNCTIE = P_ID;
    IF nr = 0 THEN
      RAISE functie_doesnt_exist;
    END IF;
    DELETE FROM FUNCTII WHERE ID_FUNCTIE = P_ID;
  EXCEPTION
    WHEN functie_doesnt_exist THEN
      DBMS_OUTPUT.PUT_LINE('Functia nu exista!');
  END STERGE_FUNCTIE;

END PACHET2;
/

-- SA SE APELEZE SUBPROGRAMELE DIN CADRUL PACHETULUI.


EXECUTE pachet2.adauga_functie('AD_PRES2', 'Functie1', 1000, 2000);
EXECUTE pachet2.MODIFICA_FUNCTIE('AD_PRES2', 'Test');
EXECUTE pachet2.STERGE_FUNCTIE('AD_PRES2');

-- 3. CONSTRUITI UN PACHET CARE SA CONTINA:

-- - O PROCEDURA CARE AFISEAZA NUMELE, VECHIMEA SI VENITUL TOTAL (SALARIU + COMISION) PENTRU ANGAJATUL AL CARUI ID ESTE DAT CA PARAMETRU;

-- - O PROCEDURA CARE MARESTE CU 2 SALARIUL ANGAJATULUI AL CARUI ID ESTE DAT CA PARAMETRU.

-- ÎN AMBELE PROCEDURI DE MAI SUS, SA SE VERIFICE SITUATIA ÎN CARE ANGAJATUL INDICAT NU EXISTA (INVOCÂND O EXCEPTIE ÎN ACEST CAZ) PRIN APELUL UNEI FUNCTII PRIVATE, CREATA ÎN ACEST SCOP.

-- SA SE APELEZE PROCEDURILE DIN CADRUL PACHETULUI.

CREATE OR REPLACE PACKAGE PACHET3 AS
  PROCEDURE AFISEAZA_ANGAJAT(
    P_ID IN ANGAJATI.ID_ANGAJAT%TYPE
  );
  PROCEDURE MARESTE_SALARIU(
    P_ID IN ANGAJATI.ID_ANGAJAT%TYPE
  );
END PACHET3;
/

CREATE OR REPLACE PACKAGE BODY PACHET3 AS
  FUNCTION CHECK_IF_EXISTS(p_id ANGAJATI.ID_ANGAJAT%TYPE) RETURN BOOLEAN IS
      test BOOLEAN := TRUE;
      nr NUMBER;
    BEGIN
      SELECT COUNT(*) into nr from ANGAJATI WHERE ID_ANGAJAT = P_ID;
      IF nr = 0 THEN
        test := FALSE;
      END IF;
      RETURN TEST;
    END CHECK_IF_EXISTS;
  
  PROCEDURE AFISEAZA_ANGAJAT(p_id ANGAJATI.ID_ANGAJAT%TYPE) IS
    angajat_doesnt_exist EXCEPTION;
    v_nume ANGAJATI.NUME%TYPE;
    v_vechime NUMBER;
    v_venit NUMBER;
    BEGIN
      IF CHECK_IF_EXISTS(p_id) = FALSE THEN
        RAISE angajat_doesnt_exist;
      END IF;
      SELECT NUME, ROUND((SYSDATE - DATA_ANGAJARE)/365), SALARIUL * (1 + NVL(COMISION, 0)) into v_nume, v_vechime, v_venit FROM ANGAJATI WHERE ID_ANGAJAT = P_ID;
      DBMS_OUTPUT.PUT_LINE('Nume: ' || v_nume || ' Vechime: ' || v_vechime || ' Venit: ' || v_venit);
    EXCEPTION
      WHEN angajat_doesnt_exist THEN 
        DBMS_OUTPUT.PUT_LINE('Angajatul nu exista');
    END AFISEAZA_ANGAJAT;

  PROCEDURE MARESTE_SALARIU(P_ID IN ANGAJATI.ID_ANGAJAT%TYPE) IS
    angajat_doesnt_exist EXCEPTION;
    BEGIN
      IF CHECK_IF_EXISTS(p_id) = FALSE THEN
        RAISE angajat_doesnt_exist;
      END IF;
      UPDATE ANGAJATI SET SALARIUL = SALARIUL + 2 WHERE ID_ANGAJAT = P_ID;
    EXCEPTION
      WHEN angajat_doesnt_exist THEN 
        DBMS_OUTPUT.PUT_LINE('Angajatul nu exista');
    END MARESTE_SALARIU;
END PACHET3;
/

SELECT * from angajati;

EXECUTE PACHET3.AFISEAZA_ANGAJAT(99);

EXECUTE PACHET3.MARESTE_SALARIU(100);